//// ----------------------------------------------------
//// -- DBML (Database Markup Language) for Vue Portfolio
//// -- Designed to make the portfolio content fully
//// -- configurable through an admin dashboard.
//// ----------------------------------------------------

// Project-level settings
Project vue_portfolio {
  database_type: 'PostgreSQL'
  Note: 'A scalable and dynamic database schema for a personal portfolio website.'
}

// Table for admin user accounts
Table users {
  id integer [pk, increment]
  username varchar(50) [unique, not null]
  email varchar(255) [unique, not null]
  password_hash varchar(255) [not null]
  full_name varchar(100)
  created_at timestamp [default: `now()`]
  
  Note: 'Stores admin users who can log in and manage the portfolio content.'
}

// Table for general, site-wide settings and content for the hero/about sections.
// Using a key-value approach for flexibility.
Table site_settings {
  key varchar(50) [pk]
  value text
  
  Note: 'Key-value store for global site settings and single-instance content like hero text or about paragraphs.'
}
// Example keys: 'site_title', 'hero_greeting', 'hero_main_title', 'hero_subtitle', 'about_section_image', 'about_section_description', 'cv_download_url'

// Table for technologies/skills (e.g., Vue, React, Node.js)
Table technologies {
  id integer [pk, increment]
  name varchar(100) [not null, unique]
  icon_url varchar(255) [note: 'URL or path to the technology icon/logo']
  category varchar(50) [note: 'e.g., Frontend, Backend, Database, DevOps']
  created_at timestamp [default: `now()`]
}

// Table for portfolio projects
Table projects {
  id integer [pk, increment]
  title varchar(255) [not null]
  description text
  thumbnail_url varchar(255)
  project_url varchar(255)
  repository_url varchar(255)
  display_order integer [default: 0, note: 'Used for ordering projects on the site']
  is_published boolean [default: true]
  created_at timestamp [default: `now()`]
}

// Junction table for the many-to-many relationship between projects and technologies
Table project_technologies {
  project_id integer [ref: > projects.id]
  technology_id integer [ref: > technologies.id]
  
  indexes {
    (project_id, technology_id) [pk]
  }
}

// Enum for experience types
Enum experience_type {
  Work
  Education
}

// Table for work experience and education history
Table experiences {
  id integer [pk, increment]
  type experience_type [not null]
  title varchar(255) [not null, note: 'Job title or degree name']
  organization_name varchar(255) [not null, note: 'Company name or university name']
  start_date date [not null]
  end_date date [note: 'Null if it is the current experience']
  description text
  display_order integer [default: 0]
  is_published boolean [default: true]
  created_at timestamp [default: `now()`]
}

// Table for client or colleague testimonials
Table testimonials {
  id integer [pk, increment]
  author_name varchar(100) [not null]
  author_title varchar(100) [note: 'e.g., CEO @ Example Inc.']
  author_avatar_url varchar(255)
  testimonial_text text [not null]
  display_order integer [default: 0]
  is_published boolean [default: true]
  created_at timestamp [default: `now()`]
}

// Table for certifications
Table certifications {
  id integer [pk, increment]
  title varchar(255) [not null]
  issuing_organization varchar(255) [not null]
  issue_date date
  credential_url varchar(255)
  credential_image_url varchar(255)
  display_order integer [default: 0]
  is_published boolean [default: true]
  created_at timestamp [default: `now()`]
}

// Table for social media links
Table social_media_links {
  id integer [pk, increment]
  platform_name varchar(50) [not null, unique, note: 'e.g., GitHub, LinkedIn, Twitter']
  url varchar(255) [not null]
  display_order integer [default: 0]
}
